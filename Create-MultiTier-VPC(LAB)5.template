{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "Creates a 2-tier (public, private) multi-AZ (eu-west-1a, eu-west-1b, eu-west-1c) VPC with an IGW, NAT instance, Linux and Windows jump hosts.",

    "Parameters": {

		"Environment": {
            "Description": "Environment",
            "Type": "String",
            "Default": "lab",
			"MinLength": "3",
			"MaxLength":"4",
            "AllowedPattern": "[a-z]*",
            "ConstraintDescription": "Can contain only lowercase alphanumeric characters."
        },

		"Network": {
            "Description": "Network",
            "Type": "String",
            "Default": "achaplin",
			"MinLength": "3",
			"MaxLength":"15",
            "AllowedPattern": "[a-z]*",
            "ConstraintDescription": "Can contain only lowercase alphanumeric characters."
        },

		"VPCCIDRBlock": {
            "Description": "CIDR Block for the VPC",
            "Type": "String",
            "Default": "192.168.0.0/16",
			"MinLength": "10",
			"MaxLength":"18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },

        "PublicSubnetAZACIDR": {
            "Description": "The subnet for the public subnet in availability zone A",
            "Type": "String",
            "Default": "192.168.0.0/24",
			"MinLength": "10",
			"MaxLength":"18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },

        "PublicSubnetAZBCIDR": {
            "Description": "The subnet for the public subnet in availability zone B",
            "Type": "String",
            "Default": "192.168.1.0/24",
			"MinLength": "10",
			"MaxLength":"18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },

        "PublicSubnetAZCCIDR": {
            "Description": "The subnet for the public subnet in availability zone C",
            "Type": "String",
            "Default": "192.168.2.0/24",
			"MinLength": "10",
			"MaxLength":"18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },

        "PrivateSubnetAZACIDR": {
            "Description": "NThe subnet for the private subnet in availability zone A",
            "Type": "String",
            "Default": "192.168.16.0/24",
			"MinLength": "10",
			"MaxLength":"18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },

        "PrivateSubnetAZBCIDR": {
            "Description": "The subnet for the private subnet in availability zone B",
            "Type": "String",
            "Default": "192.168.17.0/24",
			"MinLength": "10",
			"MaxLength":"18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },

        "PrivateSubnetAZCCIDR": {
            "Description": "The subnet for the private subnet in availability zone C",
            "Type": "String",
            "Default": "192.168.18.0/24",
			"MinLength": "10",
			"MaxLength":"18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
        },

        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the NAT instance",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[-_ a-zA-Z0-9]*",
            "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
        },

        "SSHRDPFrom" : {
            "Description" : "Lockdown SSH/RDP access into the public subnets from only the corprate public range",
            "Type" : "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default" : "0.0.0.0/0",
            "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
        },

        "EC2NATInstanceType": {
            "Description": "EC2 NAT instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [ "t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c3.large", "c3.xlarge" ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },

        "ServiceName": {
            "Type": "String",
            "Default": "aws infrastructure",
            "AllowedPattern": "[ a-zA-Z0-9]*",
            "ConstraintDescription": "can contain only alphanumeric characters and spaces"
        },

        "ServiceOwner": {
            "Type": "String",
            "Default": "adam@distributedsquirrel.co.uk"
        },

        "ServiceTeam": {
            "Type": "String",
            "Default": "devops@distriubtedsquirrel.co.uk"
        },

        "Department": {
            "Type": "String",
            "Default": "dsl-it",
            "AllowedPattern": "[-a-zA-Z0-9]*",
            "ConstraintDescription": "can contain only alphanumeric characters and dashes."
        }

    },

    "Mappings": {

        "AWSInstanceType2Arch": {
            "t2.micro": { "Arch": "64HVMGP2" },
            "t2.small": { "Arch": "64HVMGP2" },
            "t2.medium": { "Arch": "64HVMGP2" },
            "m3.medium": { "Arch": "64HVMGP2" },
            "m3.large": { "Arch": "64HVMGP2" },
            "m3.xlarge": { "Arch": "64HVMGP2" },
            "m3.2xlarge": { "Arch": "64HVMGP2" },
            "c3.large": { "Arch": "64HVMGP2" },
            "c3.xlarge": { "Arch": "64HVMGP2" }
        },

        "AWSRegionArch2AMI": {
            "us-east-1": { "64HVMEBS": "needs populating", "64HVMGP2": "needs populating", "64PV": "needs populating" },
            "us-west-2": { "64HVMEBS": "needs populating", "64HVMGP2": "needs populating", "64PV": "needs populating" },
            "us-west-1": { "64HVMEBS": "needs populating", "64HVMGP2": "needs populating", "64PV": "needs populating" },
            "eu-west-1": { "64HVMEBS": "ami-3760b040", "64HVMGP2": "ami-5b60b02c", "64PV": "ami-6d60b01a" },
            "eu-central-1": { "64HVMEBS": "needs populating", "64HVMGP2": "needs populating", "64PV": "needs populating" },
            "ap-southeast-1": { "64HVMEBS": "needs populating", "64HVMGP2": "needs populating", "64PV": "needs populating" },
            "ap-northeast-1": { "64HVMEBS": "needs populating", "64HVMGP2": "needs populating", "64PV": "needs populating" },
            "ap-southeast-1": { "64HVMEBS": "needs populating", "64HVMGP2": "needs populating", "64PV": "needs populating" },
            "sa-east-1": { "64HVMEBS": "needs populating", "64HVMGP2": "needs populating", "64PV": "needs populating" }
        }

    },

    "Resources": {

        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "CidrBlock": { "Ref": "VPCCIDRBlock" },
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join" : [ "-", [ "aws", { "Ref": "Environment" }, { "Ref": "Network" }, "vpc" ] ] } },
                    { "Key": "ServiceName", "Value": { "Ref": "ServiceName" } },
                    { "Key": "ServiceOwner", "Value": { "Ref": "ServiceOwner" } },
                    { "Key": "ServiceTeam", "Value": { "Ref": "ServiceTeam" } },
                    { "Key": "Department", "Value": { "Ref": "Department" } }
                ]
            }
        },

        "PublicSubnetAZA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "CidrBlock": { "Ref": "PublicSubnetAZACIDR" },
                "AvailabilityZone": "eu-west-1a",
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join" : [ "-", [ "aws", { "Ref": "Environment" }, { "Ref": "Network" }, "public","aza", "subnet" ] ] } },
                    { "Key": "ServiceName", "Value": { "Ref": "ServiceName" } },
                    { "Key": "ServiceOwner", "Value": { "Ref": "ServiceOwner" } },
                    { "Key": "ServiceTeam", "Value": { "Ref": "ServiceTeam" } },
                    { "Key": "Department", "Value": { "Ref": "Department" } }
                ]
            }
        },

        "PublicSubnetAZB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "CidrBlock": { "Ref": "PublicSubnetAZBCIDR" },
                "AvailabilityZone": "eu-west-1b",
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join": [ "-", [ "aws", { "Ref": "Environment" }, { "Ref": "Network" }, "public","azb", "subnet" ] ] } },
                    { "Key": "ServiceName", "Value": { "Ref": "ServiceName" } },
                    { "Key": "ServiceOwner", "Value": { "Ref": "ServiceOwner" } },
                    { "Key": "ServiceTeam", "Value": { "Ref": "ServiceTeam" } },
                    { "Key": "Department", "Value": { "Ref": "Department" } }
                ]
            }
        },

        "PublicSubnetAZC": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "CidrBlock": { "Ref": "PublicSubnetAZCCIDR" },
                "AvailabilityZone": "eu-west-1c",
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join" : [ "-", [ "aws", { "Ref": "Environment" }, { "Ref": "Network" }, "public","azc", "subnet" ] ] } },
                    { "Key": "ServiceName", "Value": { "Ref": "ServiceName" } },
                    { "Key": "ServiceOwner", "Value": { "Ref": "ServiceOwner" } },
                    { "Key": "ServiceTeam", "Value": { "Ref": "ServiceTeam" } },
                    { "Key": "Department", "Value": { "Ref": "Department" } }
                ]
            }
        },

		"PrivateSubnetAZA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "CidrBlock": { "Ref": "PrivateSubnetAZACIDR" },
                "AvailabilityZone": "eu-west-1a",
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join" : [ "-", [ "aws", { "Ref": "Environment" }, { "Ref": "Network" }, "private","aza", "subnet" ] ] } },
                    { "Key": "ServiceName", "Value": { "Ref": "ServiceName" } },
                    { "Key": "ServiceOwner", "Value": { "Ref": "ServiceOwner" } },
                    { "Key": "ServiceTeam", "Value": { "Ref": "ServiceTeam" } },
                    { "Key": "Department", "Value": { "Ref": "Department" } }
                ]
            }
        },

        "PrivateSubnetAZB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "CidrBlock": { "Ref": "PrivateSubnetAZBCIDR" },
                "AvailabilityZone": "eu-west-1b",
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join" : [ "-", [ "aws", { "Ref": "Environment" }, { "Ref": "Network" }, "private","azb", "subnet" ] ] } },
                    { "Key": "ServiceName", "Value": { "Ref": "ServiceName" } },
                    { "Key": "ServiceOwner", "Value": { "Ref": "ServiceOwner" } },
                    { "Key": "ServiceTeam", "Value": { "Ref": "ServiceTeam" } },
                    { "Key": "Department", "Value": { "Ref": "Department" } }
                ]
            }
        },

        "PrivateSubnetAZC": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "CidrBlock": { "Ref": "PrivateSubnetAZCCIDR" },
                "AvailabilityZone": "eu-west-1c",
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join" : [ "-", [ "aws", { "Ref": "Environment" }, { "Ref": "Network" }, "private","azc", "subnet" ] ] } },
                    { "Key": "ServiceName", "Value": { "Ref": "ServiceName" } },
                    { "Key": "ServiceOwner", "Value": { "Ref": "ServiceOwner" } },
                    { "Key": "ServiceTeam", "Value": { "Ref": "ServiceTeam" } },
                    { "Key": "Department", "Value": { "Ref": "Department" } }
                ]
            }
        },

        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join" : [ "-", [ "aws", { "Ref": "Environment" }, { "Ref": "Network" }, "igw" ] ] } },
                    { "Key": "ServiceName", "Value": { "Ref": "ServiceName" } },
                    { "Key": "ServiceOwner", "Value": { "Ref": "ServiceOwner" } },
                    { "Key": "ServiceTeam", "Value": { "Ref": "ServiceTeam" } },
                    { "Key": "Department", "Value": { "Ref": "Department" } }
                ]
            }
        },

        "GatewayToInternet": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "InternetGatewayId": { "Ref": "InternetGateway" }
            }
        },

        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join" : [ "-", [ "aws", { "Ref": "Environment" }, { "Ref": "Network" }, "public", "rtb" ] ] } },
                    { "Key": "ServiceName", "Value": { "Ref": "ServiceName" } },
                    { "Key": "ServiceOwner", "Value": { "Ref": "ServiceOwner" } },
                    { "Key": "ServiceTeam", "Value": { "Ref": "ServiceTeam" } },
                    { "Key": "Department", "Value": { "Ref": "Department" } }
                ]
            }
        },

        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayToInternet",
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": { "Ref": "InternetGateway" }
            }
        },

        "PublicSubnetAZARouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnetAZA" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },

        "PublicSubnetAZBRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnetAZB" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },

        "PublicSubnetAZCRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnetAZC" },
                "RouteTableId": { "Ref": "PublicRouteTable" }
            }
        },

		"PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join" : [ "-", [ "aws", { "Ref": "Environment" }, { "Ref": "Network" }, "private", "rtb" ] ] } },
                    { "Key": "ServiceName", "Value": { "Ref": "ServiceName" } },
                    { "Key": "ServiceOwner", "Value": { "Ref": "ServiceOwner" } },
                    { "Key": "ServiceTeam", "Value": { "Ref": "ServiceTeam" } },
                    { "Key": "Department", "Value": { "Ref": "Department" } }
                ]
            }
        },

        "PrivateRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "NATInstance",
            "Properties": {
                "RouteTableId": { "Ref": "PrivateRouteTable" },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": { "Ref": "NATInstance" }
            }
        },

        "PrivateSubnetAZARouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PrivateSubnetAZA" },
                "RouteTableId": { "Ref": "PrivateRouteTable" }
            }
        },

        "PrivateSubnetAZBRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PrivateSubnetAZB" },
                "RouteTableId": { "Ref": "PrivateRouteTable" }
            }
        },

        "PrivateSubnetAZCRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PrivateSubnetAZC" },
                "RouteTableId": { "Ref": "PrivateRouteTable" }
            }
        },

        "PublicNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join": [ "-", [ "aws", { "Ref": "Environment" }, { "Ref": "Network" }, "public", "nacl" ] ] } },
                    { "Key": "ServiceName", "Value": { "Ref": "ServiceName" } },
                    { "Key": "ServiceOwner", "Value": { "Ref": "ServiceOwner" } },
                    { "Key": "ServiceTeam", "Value": { "Ref": "ServiceTeam" } },
                    { "Key": "Department", "Value": { "Ref": "Department" } }
                ]
            }
        },

        "InboundHTTPPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "80", "To": "80" }
            }
        },

        "InboundHTTPSPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "101",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "443", "To": "443" }
            }
        },

        "InboundSSHPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "102",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": { "Ref": "SSHRDPFrom" },
                "PortRange": { "From": "22", "To": "22" }
            }
        },

        "InboundRDPPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "103",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": { "Ref": "SSHRDPFrom" },
                "PortRange": { "From": "3389", "To": "3389" }
            }
        },

        "InboundEmphemeralPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "104",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "1024", "To": "65535" }
            }
        },

        "OutboundPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "0", "To": "65535" }
            }
        },

        "PublicSubnetAZANetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnetAZA" },
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }
            }
        },

        "PublicSubnetAZBNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnetAZB" },
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }
            }
        },

        "PublicSubnetAZCNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PublicSubnetAZC" },
                "NetworkAclId": { "Ref": "PublicNetworkAcl" }
            }
        },

		"PrivateNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "Tags": [
                    { "Key": "Name", "Value": { "Fn::Join": [ "-", [ "aws", { "Ref": "Environment" }, { "Ref": "Network" }, "private", "nacl" ] ] } },
                    { "Key": "ServiceName", "Value": { "Ref": "ServiceName" } },
                    { "Key": "ServiceOwner", "Value": { "Ref": "ServiceOwner" } },
                    { "Key": "ServiceTeam", "Value": { "Ref": "ServiceTeam" } },
                    { "Key": "Department", "Value": { "Ref": "Department" } }
                ]
            }
        },

		"InboundWellknownPrivateNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PrivateNetworkAcl" },
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "192.168.0.0/20",
                "PortRange": { "From": "1", "To": "1023" }
            }
        },

        "InboundEmphemeralPrivateNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PrivateNetworkAcl" },
                "RuleNumber": "101",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "192.168.0.0/20",
                "PortRange": { "From": "1024", "To": "65535" }
            }
        },

        "OutboundPrivateNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PrivateNetworkAcl" },
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": { "From": "0", "To": "65535" }
            }
        },

        "PrivateSubnetAZANetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PrivateSubnetAZA" },
                "NetworkAclId": { "Ref": "PrivateNetworkAcl" }
            }
        },

        "PrivateSubnetAZBNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PrivateSubnetAZB" },
                "NetworkAclId": { "Ref": "PrivateNetworkAcl" }
            }
        },

        "PrivateSubnetAZCNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "PrivateSubnetAZC" },
                "NetworkAclId": { "Ref": "PrivateNetworkAcl" }
            }
        },


        "NATInstanceEIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": { "Ref": "NATInstance" }
            }
        },

        "NATInstance": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "GatewayToInternet",
            "Properties": {
                "InstanceType": { "Ref": "EC2NATInstanceType" },
                "KeyName": { "Ref": "KeyName" },
                "ImageId": { "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, { "Fn::FindInMap": [ "AWSInstanceType2Arch", { "Ref": "EC2NATInstanceType" }, "Arch" ] } ] },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [ { "Ref": "NATSecurityGroup" } ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": { "Ref": "PublicSubnetAZA" }
                    }
                ],
				"Tags": [
                    { "Key": "Name", "Value": { "Fn::Join": [ "-", [ "aws", { "Ref": "Environment" }, { "Ref": "Network" }, "nat", "i", "01" ] ] } },
                    { "Key": "ServiceName", "Value": { "Ref": "ServiceName" } },
                    { "Key": "ServiceOwner", "Value": { "Ref": "ServiceOwner" } },
                    { "Key": "ServiceTeam", "Value": { "Ref": "ServiceTeam" } },
                    { "Key": "Department", "Value": { "Ref": "Department" } },
					{ "Key": "CostCode", "Value": { "Ref": "CostCode" } },
					{ "Key": "AutoShutdown", "Value": { "Ref": "AutoShutdown" } }
                ]
            }
        },

        "NATSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Rules for allowing access to NAT instance",
                "VpcId": { "Ref": "VPC" },
                "SecurityGroupIngress": [
                    { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0" },
                    { "IpProtocol": "-1", "FromPort": "0", "ToPort": "65535", "CidrIp": "192.168.0.0/16" }
                ],
                "SecurityGroupEgress": [
                    { "IpProtocol": "-1", "FromPort": "0", "ToPort": "65535", "CidrIp": "0.0.0.0/0" }
                ],
				"Tags": [
                    { "Key": "Name", "Value": { "Fn::Join": [ "-", [ "aws", { "Ref": "Environment" }, { "Ref": "Network" }, "nat", "sg" ] ] } },
                    { "Key": "ServiceName", "Value": { "Ref": "ServiceName" } },
                    { "Key": "ServiceOwner", "Value": { "Ref": "ServiceOwner" } },
                    { "Key": "ServiceTeam", "Value": { "Ref": "ServiceTeam" } },
                    { "Key": "Department", "Value": { "Ref": "Department" } }
                ]
            }
        }
    },

        "Outputs": {
            "VPCId": {
                "Description": "VPCId of the newly created VPC",
                "Value": { "Ref": "VPC" }
            },
            "PublicSubnetAZA": {
                "Description": "SubnetId of the public subnet in Availability Zone A",
                "Value": { "Ref": "PublicSubnetAZA" }
            },
            "PublicSubnetAZB": {
                "Description": "SubnetId of the public subnet in Availability Zone B",
                "Value": { "Ref": "PublicSubnetAZB" }
            },
            "PublicSubnetAZC": {
                "Description": "SubnetId of the public subnet in Availability Zone C",
                "Value": { "Ref": "PublicSubnetAZC" }
            },
            "DNSName": {
                "Description": "DNS Name of the NAT instance",
                "Value": { "Fn::GetAtt": [ "NATInstance", "PublicDnsName" ] }
            }
        }
    }
